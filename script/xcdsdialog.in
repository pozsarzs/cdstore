#!/bin/bash

# +----------------------------------------------------------------------------+
# | CDStore 0.5 * Command line CD catalogue                                    |
# | Copyright (C) 2002-2007 Pozsar Zsolt <pozsarzs@t-email.hu>                 |
# | xdsdialog                                                                  |
# | Shell script                                                               |
# +----------------------------------------------------------------------------+

#      This programme is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#      This programme is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    General Public License for more details.
#
#      A copy of the GNU General Public License is available on the World
#    Wide Web at <http://www.gnu.org/copyleft/gpl.html>. You can also
#    obtain it by writing to the Free Software Foundation,
#    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# --- general functions ---

deltemp()                                               # Erase temporary files.
{
  rm --force /tmp/$$_1.tmp > /dev/null
  rm --force /tmp/$$_2.tmp > /dev/null
  rm --force /tmp/$$_3.tmp > /dev/null
}

check_permission()                                           # Check permission.
{
  if [ $MODE = root ]
  then
    if [ `whoami` != "root" ]
    then
      Xdialog --beep --title "$TITLE [$CATDIR]" --msgbox "$MSG02" 6 40
      return	
    fi
  fi
}

filesearch()                                                      # File search.
{
    find * -type f > /tmp/$$_1.tmp
    if [ $1 = arc ]
    then
        for X in $ARCHFILES
	do
	    cat /tmp/$$_1.tmp | grep '\.'$X >> $LIBDIR/$CATDIR/$LIBFILE
	done
    fi	
    if [ $1 = mm ]
    then
    	for X in $MMFILES
	do
	    cat /tmp/$$_1.tmp | grep '\.'$X >> $LIBDIR/$CATDIR/$LIBFILE
	done
    fi
    if [ $1 = all ]; then cat /tmp/$$_1.tmp > $LIBDIR/$CATDIR/$LIBFILE; fi
    cat $LIBDIR/$CATDIR/$LIBFILE > /tmp/$$_1.tmp
    sort /tmp/$$_1.tmp > $LIBDIR/$CATDIR/$LIBFILE
    deltemp
}

dirsearch()                                                  # Directory search.
{
    find * -type d > /tmp/$$_1.tmp
    cat /tmp/$$_1.tmp > $LIBDIR/$CATDIR/$LIBFILE
    cat $LIBDIR/$CATDIR/$LIBFILE > /tmp/$$_1.tmp
    sort /tmp/$$_1.tmp > $LIBDIR/$CATDIR/$LIBFILE
    deltemp
}

# --- special functions ---

add()                                                            # Add new disc.
{
  if [ $MODE = root ]
  then
    if [ `whoami` != "root" ]
    then
      Xdialog --beep --title "$TITLE [$CATDIR]" --msgbox "$MSG02" 6 40
      return	
    fi
  fi

  while true
  do
    Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" \
      --inputbox "$MSG09" 8 50 "" 2> /tmp/$$_3.tmp
    if [ $? -ne 0 ]; then break; fi
    LIBFILE=`cat /tmp/$$_3.tmp`

    if [ -z $LIBFILE ]; then return; fi

    if [ $LIBFILE ]
    then

      if [ -f $LIBDIR/$CATDIR/$LIBFILE ]                           # Busy disc name.
      then
        Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG04" 6 40
        break
      fi
  
      if [ $SUPERMOUNT != yes ]
      then
        eject $DEVICE
        Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG05" 6 60
        mount $DEVICE $MOUNTPOINT > /dev/null
        if [ $? -ne 0 ]
        then 
          Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG27" 6 40
          break
        fi
      fi
      cd $MOUNTPOINT
      Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" \
        --menu " $MSG21 " 11 41 4 \
        1 "$MSG22" 2 "$MSG23" 3 "$MSG24" 4 "$MSG25" 2> /tmp/$$_3.tmp
      if [ $? -eq 0 ]
      then 
      case `cat /tmp/$$_3.tmp` in
        1) dirsearch;;
        2) filesearch arc;;
        3) filesearch mm;;
        4) filesearch all;;
      esac
      else
        cd ..; \
        umount $DEVICE; \
        eject $DEVICE; \
        Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG07" 6 60; \
        break
      fi
      if [ $SUPERMOUNT != yes ]
      then
        cd ..
        umount $DEVICE
        eject $DEVICE
        Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG07" 6 60
      fi
      $XEDITOR $LIBDIR/$CATDIR/$LIBFILE
      rm --force $LIBDIR/$CATDIR/*~
      break
    fi
    deltemp
    return
  done
}

erase()                                              # Erase disc from database.
{
  if [ $MODE = root ]
  then
    if [ `whoami` != "root" ]
    then
      Xdialog --beep --title "$TITLE [$CATDIR]" --msgbox "$MSG02" 6 40
      return	
    fi
  fi

  cd $LIBDIR/$CATDIR
  find -type f > /tmp/$$_2.tmp
  cat /tmp/$$_2.tmp | sort | sed s/'\.\/'/''/ > /tmp/$$_1.tmp
  CATLISTMENU=`cat -n /tmp/$$_1.tmp`

  if [ -z $CATLISTMENU ]
  then
    Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG45" 6 40
    deltemp
    return
  fi

  Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" \
    --menu " $MSG19 "  11 30 4 $CATLISTMENU 2> /tmp/$$_3.tmp
  if [ $? -eq 0 ]
  then 
    LINE=`cat /tmp/$$_3.tmp`
    SELECTED=`cat /tmp/$$_1.tmp | sed -n $LINE'p'`
    rm -f $SELECTED
  fi    
  return
  deltemp
  return
}

search()                                               # Search in the database.
{
  while true
  do
    Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" \
      --inputbox "" 8 50 "" 2> /tmp/$$_3.tmp
  if [ $? -ne 0 ]; then break; fi
  PACKAGE=`cat /tmp/$$_3.tmp`
  if [ $PACKAGE ]
  then
    ls $LIBDIR/$CATDIR > /tmp/$$_1.tmp
    rm -f /tmp/$$_2.tmp
    touch  /tmp/$$_2.tmp
    while read FILENAMES
    do
      if grep $PACKAGE $LIBDIR/$CATDIR/$FILENAMES > /dev/null
      then
        echo $MSG09 $FILENAMES >> /tmp/$$_2.tmp
	echo "" >> /tmp/$$_2.tmp
	grep $PACKAGE $LIBDIR/$CATDIR/$FILENAMES >> /tmp/$$_2.tmp
	echo "" >> /tmp/$$_2.tmp
      fi
    done < /tmp/$$_1.tmp
    if [ -s /tmp/$$_2.tmp ]
    then
      Xdialog --exit-label "Ok" --no-cancel --title "$TITLE [$CATDIR]" \
	--textbox /tmp/$$_2.tmp 20 76
    else
      Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG10" 6 30
    fi
    break
  fi
  done
  deltemp
}

list()                                        # List disc name and disc content.
{
  cd $LIBDIR/$CATDIR
  find -type f > /tmp/$$_2.tmp
  cat /tmp/$$_2.tmp | sort | sed s/'\.\/'/''/ > /tmp/$$_1.tmp
  CATLISTMENU=`cat -n /tmp/$$_1.tmp`

  if [ -z $CATLISTMENU ]
  then
    Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG45" 6 40
    deltemp
    return
  fi

  Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" \
    --menu " $MSG17 "  11 40 4 $CATLISTMENU 2> /tmp/$$_3.tmp
  if [ $? -eq 0 ]
  then 
    LINE=`cat /tmp/$$_3.tmp`
    SELECTED=`cat /tmp/$$_1.tmp | sed -n $LINE'p'`
    cat $LIBDIR/$CATDIR/$SELECTED > /tmp/$$_1.tmp
    Xdialog --exit-label "Ok" --title "$TITLE [$CATDIR]" --title " $MSG26 $SELECTED " \
      --textbox /tmp/$$_1.tmp 20 76
  fi    
  return
  deltemp
  return
}

categories()                                                # Manage categories.
{

  cat_actual()                                            # Set actual category.
  {
    cd $LIBDIR
    find -type d > /tmp/$$_2.tmp
    find -type l >> /tmp/$$_2.tmp
    cat /tmp/$$_2.tmp | sort | sed 1d | sed s/'\.\/'/''/ > /tmp/$$_1.tmp
    CATLISTMENU=`cat -n /tmp/$$_1.tmp`
    Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" \
      --menu " $MSG39 " 11 30 4 $CATLISTMENU 2> /tmp/$$_3.tmp
    if [ $? -eq 0 ]
    then 
      LINE=`cat /tmp/$$_3.tmp`
      CATDIR=`cat /tmp/$$_1.tmp | sed -n $LINE'p'`
    fi
    deltemp
    return
  }
  
  cat_add()                                                  # Add new category.
  {
    if [ $MODE = root ]
    then
      if [ `whoami` != "root" ]
      then
        Xdialog --beep --title "$TITLE [$CATDIR]" --msgbox "$MSG02" 6 40
        return	
      fi
    fi

    while true
    do
      Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" \
        --inputbox "$MSG44" 9 50 "" 2> /tmp/$$_3.tmp
      if [ $? -ne 0 ]; then break; fi
      NEWCAT=`cat /tmp/$$_3.tmp`
      if [ $NEWCAT ]
      then
        if [ -d $LIBDIR/$NEWCAT ]
        then
          Xdialog --title "$TITLE [$CATDIR]" --msgbox "$MSG04" 7 40
          return
        else
          mkdir $LIBDIR/$NEWCAT
          return
        fi
      fi
    done
  }

  cat_erase()                                                    # Erase category.
  {
    if [ $MODE = root ]
    then
      if [ `whoami` != "root" ]
      then
        Xdialog --beep --title "$TITLE [$CATDIR]" --msgbox "$MSG02" 6 40
        return	
      fi
    fi

    cd $LIBDIR
    find -type d > /tmp/$$_2.tmp
    find -type l >> /tmp/$$_2.tmp
    cat /tmp/$$_2.tmp | sort | sed 1d | sed s/'\.\/'/''/ > /tmp/$$_1.tmp
    CATLISTMENU=`cat -n /tmp/$$_1.tmp`
    Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" \
      --menu " $MSG41 " 11 30 4 $CATLISTMENU 2> /tmp/$$_3.tmp
    if [ $? -eq 0 ]
    then 
      LINE=`cat /tmp/$$_3.tmp`
      SELECTED=`cat /tmp/$$_1.tmp | sed -n $LINE'p'`

      if [ $SELECTED = 'default' ]           # Default category is not erasable.
      then
        echo $MSG36
        Xdialog --beep --title "$TITLE [$CATDIR]" --msgbox "$MSG36" 6 50
        return
      fi

      if [ $SELECTED = $CATDIR ]              # Actual category is not erasable.
      then
        echo $MSG36
        Xdialog --beep --title "$TITLE [$CATDIR]" --msgbox "$MSG43" 6 50
        return
      fi

      if [ -d $LIBDIR/$SELECTED ]                   # Erase files and directory.
      then
        rm --force $LIBDIR/$SELECTED/*
        rmdir $LIBDIR/$SELECTED 
      else 
        Xdialog --beep --title "$TITLE [$CATDIR]" --msgbox "$MSG34" 6 50
      fi

    fi
    deltemp
    return
  }

  cat_list()                                              # List all categories.
  {
    cd $LIBDIR
    find -type d > /tmp/$$_2.tmp
    find -type l >> /tmp/$$_2.tmp
    cat /tmp/$$_2.tmp | sort | sed 1d | sed s/'\.\/'/''/ > /tmp/$$_1.tmp
    Xdialog --exit-label "Ok" --title "$TITLE [$CATDIR]" --title " $MSG35 " \
      --textbox /tmp/$$_1.tmp 20 76
   }

  while true 
  do
    Xdialog --cancel-label "$MSG30" --title "$TITLE [$CATDIR]" --menu " $MSG35 " \
      11 40 4 1 "$MSG39" 2 "$MSG40" 3 "$MSG41" 4 "$MSG42" 2> /tmp/$$_3.tmp
    if [ $? -eq 0 ]
    then 
      case `cat /tmp/$$_3.tmp` in
        1)  cat_actual;;
        2)  cat_add;;
        3)  cat_erase;;
        4)  cat_list;;
      esac
    else return
    fi
  done
}

information()                                           # Important information.
{
  RDMEFILE=@prefix@/share/doc/cdstore-0.5/README

  if [ -f /usr/share/cdstore/doc/README ]
  then
    RDMEFILE=/usr/share/cdstore/doc/README
  fi

  if [ -f $HOME/.local/share/cdstore/doc/README ]
  then
    RDMEFILE=$HOME/.local/share/cdstore/doc/README
  fi

  Xdialog --exit-label "Ok" --title "$TITLE [$CATDIR]" --backtitle "$MSG20" \
      --textbox "$RDMEFILE" 20 76
}

help()                                                          # Help function.
{
  echo "$MSG13"
  echo "	cds [-h | -v]"
  echo "	cds [--help | --version]"
  exit
}

# --- Main function ---

if [ -r $HOME/.cdstore/cdstorerc ]                         # Load configuration.
then
  CFGFILE=$HOME/.cdstore/cdstorerc
  LIBDIR=$HOME/.cdstore/discs
  MODE=user
else
  CFGFILE=@prefix@/etc/cdstore.cfg
  if [ -f /usr/share/cdstore/cdstore.cfg ]
  then 
    CFGFILE=/usr/share/cdstore/cdstore.cfg
  fi
  if [ -f $HOME/.local/share/cdstore/cdstore.cfg ]
  then 
    MSG39="Sorry, CDStore does not work if you install it to user's directory"
    MSG40="Please, do system-wide install with apackage and use CDStore in user mode"
    echo "$MESSAGE39"
    echo "$MESSAGE40"
    exit
  fi
  LIBDIR=`cat $CFGFILE | grep root_library | sed 's/root_library=//'`
  MODE=root
fi

ARCHFILES=`cat $CFGFILE | grep archive_files | sed 's/archive_files=//'`
DEVICE=`cat $CFGFILE | grep cd-rom_device | sed 's/cd-rom_device=//'`
MMFILES=`cat $CFGFILE | grep mm_files | sed 's/mm_files=//'`
MOUNTPOINT=`cat $CFGFILE | grep cd-rom_mount_point | sed 's/cd-rom_mount_point=//'`
SUPERMOUNT=`cat $CFGFILE | grep with_supermount | sed 's/with_supermount=//'`
MSGDIR=`cat $CFGFILE | grep language | sed 's/language=//'`
XEDITOR=`cat $CFGFILE | grep -w xeditor | sed 's/xeditor=//'`

MSGFILE=@prefix@/share/locale/$MSGDIR/cdstore.msg

if [ -f /usr/share/cdstore/msg/cdstore_$MSGDIR.msg ]
then
  MSGFILE=/usr/share/cdstore/msg/cdstore_$MSGDIR.msg
fi

if [ -f $HOME/.local/share/cdstore/msg/cdstore_$MSGDIR.msg ]
then
  MSGFILE=$HOME/.local/cdstore/share/msg/cdstore_$MSGDIR.msg
fi

TITLE=CDStore

MSG02="You have not got enough permission to this operation!"
MSG04="This name is busy!"
MSG05="Put the disc to drive and push a key when ready!"
MSG07="Remove the disc from drive and push a key when ready!"
MSG08="No such disc in the database."
MSG09="Disc name:"
MSG10="Not found!"
MSG11="Disc name [disc list: <enter>]:"
MSG12="Discs in the database:"
MSG13="Usage:"
MSG14="Cannot find (X)dialog on your system!"
MSG15="Main menu"
MSG16="Search"
MSG17="Disc and file list"
MSG18="Add new disc"
MSG19="Erase from database"
MSG20="Important information"
MSG21="Search target"
MSG22="Directories"
MSG23="Archive files"
MSG24="Multimedia files"
MSG25="All files"
MSG26="Content"
MSG27="Cannot mount disc!"
MSG28="Cannot find editor"
MSG29="Quit"
MSG30="Cancel"
MSG34="No such category in the database."
MSG35="Categories"
MSG36="Default category is not erasable."
MSG37="Category [default: <enter>]:" 
MSG38="Category [quit: <enter>]:" 
MSG39="Set actual category" 
MSG40="Create new category" 
MSG41="Erase category" 
MSG42="List of categories" 
MSG43="Actual category is not erasable!"
MSG44="Name"
MSG45="No discs in this category."

if [ -r $MSGFILE ]
then
  MSG02=`cat $MSGFILE | grep msg_02 | sed 's/msg_02=//'`
  MSG04=`cat $MSGFILE | grep msg_04 | sed 's/msg_04=//'`
  MSG05=`cat $MSGFILE | grep msg_05 | sed 's/msg_05=//'`
  MSG07=`cat $MSGFILE | grep msg_07 | sed 's/msg_07=//'`
  MSG08=`cat $MSGFILE | grep msg_08 | sed 's/msg_08=//'`
  MSG09=`cat $MSGFILE | grep msg_09 | sed 's/msg_09=//'`
  MSG10=`cat $MSGFILE | grep msg_10 | sed 's/msg_10=//'`
  MSG11=`cat $MSGFILE | grep msg_11 | sed 's/msg_11=//'`
  MSG12=`cat $MSGFILE | grep msg_12 | sed 's/msg_12=//'`
  MSG13=`cat $MSGFILE | grep msg_13 | sed 's/msg_13=//'`
  MSG14=`cat $MSGFILE | grep msg_14 | sed 's/msg_14=//'`
  MSG15=`cat $MSGFILE | grep msg_15 | sed 's/msg_15=//'`
  MSG16=`cat $MSGFILE | grep msg_16 | sed 's/msg_16=//'`
  MSG17=`cat $MSGFILE | grep msg_17 | sed 's/msg_17=//'`
  MSG18=`cat $MSGFILE | grep msg_18 | sed 's/msg_18=//'`
  MSG19=`cat $MSGFILE | grep msg_19 | sed 's/msg_19=//'`
  MSG20=`cat $MSGFILE | grep msg_20 | sed 's/msg_20=//'`
  MSG21=`cat $MSGFILE | grep msg_21 | sed 's/msg_21=//'`
  MSG22=`cat $MSGFILE | grep msg_22 | sed 's/msg_22=//'`
  MSG23=`cat $MSGFILE | grep msg_23 | sed 's/msg_23=//'`
  MSG24=`cat $MSGFILE | grep msg_24 | sed 's/msg_24=//'`
  MSG25=`cat $MSGFILE | grep msg_25 | sed 's/msg_25=//'`
  MSG26=`cat $MSGFILE | grep msg_26 | sed 's/msg_26=//'`
  MSG27=`cat $MSGFILE | grep msg_27 | sed 's/msg_27=//'`
  MSG28=`cat $MSGFILE | grep msg_28 | sed 's/msg_28=//'`
  MSG29=`cat $MSGFILE | grep msg_29 | sed 's/msg_29=//'`
  MSG30=`cat $MSGFILE | grep msg_30 | sed 's/msg_30=//'`
  MSG34=`cat $MSGFILE | grep msg_34 | sed 's/msg_34=//'`
  MSG35=`cat $MSGFILE | grep msg_35 | sed 's/msg_35=//'`
  MSG36=`cat $MSGFILE | grep msg_36 | sed 's/msg_36=//'`
  MSG37=`cat $MSGFILE | grep msg_37 | sed 's/msg_37=//'`
  MSG38=`cat $MSGFILE | grep msg_38 | sed 's/msg_38=//'`
  MSG39=`cat $MSGFILE | grep msg_39 | sed 's/msg_39=//'`
  MSG40=`cat $MSGFILE | grep msg_40 | sed 's/msg_40=//'`
  MSG41=`cat $MSGFILE | grep msg_41 | sed 's/msg_41=//'`
  MSG42=`cat $MSGFILE | grep msg_42 | sed 's/msg_42=//'`
  MSG43=`cat $MSGFILE | grep msg_43 | sed 's/msg_43=//'`
  MSG44=`cat $MSGFILE | grep msg_44 | sed 's/msg_44=//'`
  MSG45=`cat $MSGFILE | grep msg_45 | sed 's/msg_45=//'`
fi
                                           
if ! type -all "$XEDITOR"  > /dev/null 2>&1		    	 # Check editor.
then
  Xdialog --title "$TITLE" --msgbox "$MSG28: $XEDITOR" 7 40
  exit 6
fi

case $1 in                                                   # Valid parameters.
  -h)		help;;
  --help)	help;;
  -v)		echo "@version@";exit;;
  --version)	echo "@version@";exit;;
esac

if ! type -all "Xdialog" > /dev/null 2>&1                         # Check Xdialog.
then
  echo $MSG14
  exit 1
fi

CATDIR='default'

while true 
do
  Xdialog --cancel-label "$MSG29" --title "$TITLE [$CATDIR]" --menu " $MSG15 " \
    13 40 6  1 "$MSG16" 2 "$MSG17" 3 "$MSG18" 4 "$MSG19" 5 "$MSG35" \
    6 "$MSG20" 2> /tmp/$$_3.tmp
  if [ $? -eq 0 ]
  then 
    case `cat /tmp/$$_3.tmp` in
      1)  search;;
      2)  list;;
      3)  add;;
      4)  erase;;
      5)  categories;;
      6)  information;;
    esac
  else
  deltemp
  clear
  exit
  fi
done
